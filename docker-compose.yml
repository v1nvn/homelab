version: "3"

services:
  # Pihole - ad blocker
  # https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "${PIHOLE_PORT}:80/tcp"
    environment:
      TZ: "${TIMEZONE}"
      WEBPASSWORD: "${COMMON_PASSWORD}"
    # Volumes store your data between container upgrades
    volumes:
      - './data/pihole/etc-pihole:/etc/pihole'
      - './data/pihole/etc-dnsmasq.d:/etc/dnsmasq.d'    
    restart: unless-stopped

  # Portainer
  # https://docs.portainer.io/start/install/server/docker/linux
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    ports:
      - "${PORTAINER_PORT}:9000"
    environment:
      TZ: "${TIMEZONE}"
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './data/portainer/data:/data'    
    restart: unless-stopped

  # Dashy - service organizer
  # https://github.com/Lissy93/dashy/blob/master/docker-compose.yml
  dashy:
    image: lissy93/dashy:latest
    container_name: dashy
    volumes:
      - ./data/dashy/conf.yml:/app/public/conf.yml
    ports:
      - ${DASHY_PORT}:80
    environment:
      - NODE_ENV=production
      - UID=${UID}
      - GID=${GID}
    # Specify restart policy
    restart: unless-stopped
    # Configure healthchecks
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # Glances - System monitor
  # https://glances.readthedocs.io/en/latest/docker.html
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    ports:
      - "${GLANCES_PORT}:61208"
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - "GLANCES_OPT=-w"
    restart: always
  
  # Jellyfin - Media server 
  # https://hub.docker.com/r/linuxserver/jellyfin
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ="${TIMEZONE}"
      - JELLYFIN_PublishedServerUrl=192.168.0.172
    volumes:
      - ./data/jellyfin/config:/config
      - /media/vineet/movieNAS/Movies:/data/movies
      - "/media/vineet/tvNAS/TV Shows:/data/tv"
    ports:
      - ${JELLYFIN_PORT}:8096 # Http webUI
      - 7359:7359/udp # Allows clients to discover Jellyfin on the local network
      - 1900:1900/udp # Service discovery used by DNLA and clients
    restart: unless-stopped
  
  # Transmission with flood UI - torrent
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ="${TIMEZONE}"
      - TRANSMISSION_WEB_HOME=/flood-for-transmission #optional
      - USER=${COMMON_USERNAME} #optional
      - PASS=${COMMON_PASSWORD} #optional
      - PEERPORT=51413
    volumes:
      - ./data/transmision/config:/config
      - /media/vineet/movieNAS/Downloads:/downloads
    ports:
      - ${TRANSMISSION_PORT}:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
  
  # Radarr - auto torrent download
  # https://hub.docker.com/r/linuxserver/radarr
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ="${TIMEZONE}"
    volumes:
      - ./data/radarr/config:/config
    ports:
      - ${RADARR_PORT}:7878
    restart: unless-stopped

  # Prowlarr - torrent indexer
  # https://hub.docker.com/r/linuxserver/prowlarr
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ="${TIMEZONE}"
    volumes:
      - ./data/prowlarr/config:/config
    ports:
      - ${PROWLARR_PORT}:9696
    restart: unless-stopped


    # TODO(services):
    # 1. OctoPrint - 3d printer 
    #      https://github.com/OctoPrint/octoprint-docker/blob/master/docker-compose.yml

    # TODO(misc):
    # 1. Traefic reverse proxy
    #      https://doc.traefik.io/traefik/getting-started/quick-start/