version: "3"

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN_NAME}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN_NAME}
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false # require containers to define `traefik.enable=true` to be exposed
      - --api
      - --certificatesresolvers.certo.acme.email=${EMAIL}
      - --certificatesresolvers.certo.acme.storage=/acme.json
      - --certificatesresolvers.certo.acme.dnschallenge.provider=cloudflare
    ports:
      - 80:80
      - 443:443
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik/acme.json:/acme.json
    extra_hosts:
      - host.docker.internal:172.17.0.1 # Fix for discovering containers running with network_mode: host
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.middlewares=authentik@docker
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=certo

      ## == Auth bypass with API Key on local network ==
      - traefik.http.routers.traefik-api.entrypoints=websecure
      - traefik.http.routers.traefik-api.priority=99
      - traefik.http.routers.traefik-api.rule=Host(`traefik.${DOMAIN_NAME}`) && Headers(`X-Api-Key`, `${LOCAL_API_KEY}`)
      - traefik.http.routers.traefik-api.service=api@internal
      - traefik.http.routers.traefik-api.tls.certresolver=certo

  tunnel:
    image: cloudflare/cloudflared:latest
    container_name: tunnel
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}

  authentik-db:
    image: docker.io/library/postgres:12-alpine
    container_name: authentik-db
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=authentik
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./data/authentik/db:/var/lib/postgresql/data

  authentik-redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./data/authentik/redis:/data

  authentik-server:
    image: ghcr.io/goauthentik/server:2023.10.5
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_POSTGRESQL__HOST=authentik-db
      - AUTHENTIK_POSTGRESQL__USER=${DB_USERNAME}
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__PASSWORD=${DB_PASSWORD}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    volumes:
      - ./data/authentik/media:/media
      - ./data/authentik/custom-templates:/templates
    depends_on:
      - authentik-db
      - authentik-redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.rule=Host(`authentik.${DOMAIN_NAME}`)
      - traefik.http.routers.authentik.tls.certresolver=certo
      - traefik.http.routers.authentik.service=authentik

      - traefik.http.routers.authentik-proxy.entrypoints=websecure
      - traefik.http.routers.authentik-proxy.rule=PathPrefix(`/outpost.goauthentik.io/`)
      - traefik.http.routers.authentik-proxy.tls.certresolver=certo
      - traefik.http.routers.authentik-proxy.service=authentik

      - traefik.http.services.authentik.loadBalancer.server.port=9000

      - traefik.http.middlewares.authentik.forwardauth.address=http://authentik-server:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version

  authentik-worker:
    image: ghcr.io/goauthentik/server:2023.10.5
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_POSTGRESQL__HOST=authentik-db
      - AUTHENTIK_POSTGRESQL__USER=${DB_USERNAME}
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__PASSWORD=${DB_PASSWORD}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/authentik/media:/media
      - ./data/authentik/custom-templates:/templates
      - ./data/authentik/certs:/certs
    depends_on:
      - authentik-db
      - authentik-redis

  whoami:
    image: traefik/whoami:latest
    container_name: whoami
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.middlewares=authentik@docker
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN_NAME}`)
      - traefik.http.routers.whoami.tls.certresolver=certo
      - traefik.http.routers.whoami.service=whoami
      - traefik.http.services.whoami.loadBalancer.server.port=80

  adguard:
    image: adguard/adguardhome:latest
    container_name: adguard
    restart: unless-stopped
    ports:
      - 53:53/tcp
      - 53:53/udp
      # - 3000:3000 # Required for first setup
    volumes:
      - ./data/adguard/work:/opt/adguardhome/work
      - ./data/adguard/conf:/opt/adguardhome/conf
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguard.entrypoints=websecure
      - traefik.http.routers.adguard.rule=Host(`adguard.${DOMAIN_NAME}`)
      - traefik.http.routers.adguard.tls.certresolver=certo
      - traefik.http.routers.adguard.service=adguard
      - traefik.http.services.adguard.loadBalancer.server.port=80

  homepage:
    # image: ghcr.io/gethomepage/homepage:latest
    build: https://github.com/v1nvn/homepage.git
    container_name: homepage
    restart: unless-stopped
    volumes:
      - ./data/homepage/config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${UID}
      - PGID=${GID}
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.entrypoints=websecure
      - traefik.http.routers.homepage.rule=Host(`${DOMAIN_NAME}`)
      - traefik.http.routers.homepage.tls.certresolver=certo
      - traefik.http.routers.homepage.service=homepage
      - traefik.http.services.homepage.loadBalancer.server.port=3000

  stremio:
    image: stremio/server:latest
    container_name: stremio
    restart: unless-stopped
    volumes:
      - ./data/stremio:/app/settings
      - /etc/localtime:/etc/localtime:ro
    environment:
      - NO_CORS=1
      - APP_PATH=/app/settings
    labels:
      - traefik.enable=true
      - traefik.http.routers.stremio.entrypoints=websecure
      - traefik.http.routers.stremio.rule=Host(`stremio.${DOMAIN_NAME}`)
      - traefik.http.routers.stremio.tls.certresolver=certo
      - traefik.http.routers.stremio.service=stremio
      - traefik.http.services.stremio.loadBalancer.server.port=11470

  emulator:
    image: lscr.io/linuxserver/emulatorjs:latest
    container_name: emulator
    restart: unless-stopped
    volumes:
      - ./data/emulator/config:/config
      - ./data/emulator/data:/data
    ports:
      - 3000:3000
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.emulator.entrypoints=websecure
      - traefik.http.routers.emulator.rule=Host(`emulator.${DOMAIN_NAME}`)
      - traefik.http.routers.emulator.tls.certresolver=certo
      - traefik.http.routers.emulator.service=emulator
      - traefik.http.services.emulator.loadBalancer.server.port=80

  octoprint:
    image: octoprint/octoprint:latest
    container_name: octoprint
    restart: unless-stopped
    environment:
      - ENABLE_MJPG_STREAMER=true
      - MJPG_STREAMER_INPUT="-r 1920x1080 -f 30"
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
      - /dev/video0:/dev/video0
    volumes:
      - ./data/octoprint:/octoprint
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.octoprint.entrypoints=websecure
      - traefik.http.routers.octoprint.rule=Host(`octoprint.${DOMAIN_NAME}`)
      - traefik.http.routers.octoprint.tls.certresolver=certo
      - traefik.http.routers.octoprint.service=octoprint
      - traefik.http.services.octoprint.loadBalancer.server.port=80

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/portainer/data:/data
    environment:
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_NAME}`)
      - traefik.http.routers.portainer.tls.certresolver=certo
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.services.portainer.loadBalancer.server.port=9000

  glances:
    image: nicolargo/glances:latest-full
    container_name: glances
    restart: always
    pid: host
    privileged: true
    network_mode: host
    volumes:
      - ./data/glances/glances.conf:/glances/conf/glances.conf
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/etc/os-release:ro
    environment:
      - TZ=${TIMEZONE}
      - GLANCES_OPT=-w
    labels:
      - traefik.enable=true
      - traefik.http.services.glances.loadBalancer.server.port=61208

      - traefik.http.routers.glances.middlewares=authentik@docker
      - traefik.http.routers.glances.entrypoints=websecure
      - traefik.http.routers.glances.rule=Host(`glances.${DOMAIN_NAME}`)
      - traefik.http.routers.glances.tls.certresolver=certo
      - traefik.http.routers.glances.service=glances

      ## == Auth bypass with API Key on local network ==
      - traefik.http.routers.glances-api.entrypoints=websecure
      - traefik.http.routers.glances-api.priority=99
      - traefik.http.routers.glances-api.rule=Host(`glances.${DOMAIN_NAME}`) && Headers(`X-Api-Key`, `${LOCAL_API_KEY}`)
      - traefik.http.routers.glances-api.service=glances
      - traefik.http.routers.glances-api.tls.certresolver=certo

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_HTTP_API_METRICS=true
      - WATCHTOWER_HTTP_API_TOKEN=${LOCAL_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.services.watchtower.loadBalancer.server.port=8080
      - traefik.http.routers.watchtower.entrypoints=websecure
      - traefik.http.routers.watchtower.rule=Host(`watchtower.${DOMAIN_NAME}`)
      - traefik.http.routers.watchtower.tls.certresolver=certo
      - traefik.http.routers.watchtower.service=watchtower

  code:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code
    restart: unless-stopped
    volumes:
      - ./data/code/config:/config
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      - PASSWORD=${PASSWORD}
      - SUDO_PASSWORD=${PASSWORD}
      - DEFAULT_WORKSPACE=/config/workspace
    labels:
      - traefik.enable=true
      - traefik.http.routers.code.entrypoints=websecure
      - traefik.http.routers.code.rule=Host(`code.${DOMAIN_NAME}`)
      - traefik.http.routers.code.tls.certresolver=certo
      - traefik.http.routers.code.service=code
      - traefik.http.services.code.loadBalancer.server.port=8443

  speedtracker-db:
    image: postgres:15
    container_name: speedtracker-db
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=speedtest_tracker
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./data/speedtracker/db:/var/lib/postgresql/data

  speedtracker:
    image: ghcr.io/alexjustesen/speedtest-tracker:latest
    container_name: speedtracker
    restart: unless-stopped
    depends_on:
      - speedtracker-db
    volumes:
      - ./data/speedtracker/app:/config
      - ./data/speedtracker/web:/etc/ssl/web
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=speedtracker-db
      - DB_PORT=5432
      - DB_DATABASE=speedtest_tracker
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.speedtracker.entrypoints=websecure
      - traefik.http.routers.speedtracker.rule=Host(`speedtracker.${DOMAIN_NAME}`)
      - traefik.http.routers.speedtracker.tls.certresolver=certo
      - traefik.http.routers.speedtracker.service=speedtracker
      - traefik.http.services.speedtracker.loadBalancer.server.port=80

  # grafana:
  #   image: grafana/grafana-oss:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   user: '1000'
  #   volumes:
  #     - ./data/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
  #     - ./data/grafana/storage:/var/lib/grafana
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.grafana.entrypoints=websecure
  #     - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)
  #     - traefik.http.routers.grafana.tls.certresolver=certo
  #     - traefik.http.routers.grafana.service=grafana
  #     - traefik.http.services.grafana.loadBalancer.server.port=3000

  # loki:
  #   image: grafana/loki:latest
  #   container_name: loki
  #   restart: unless-stopped
  #   command: -config.file=/etc/loki/local-config.yaml

  # promtail:
  #   image: grafana/promtail:latest
  #   container_name: promtail
  #   restart: unless-stopped
  #   volumes:
  #     - ./data/grafana/promtail.yaml:/etc/promtail/docker-config.yaml
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command: -config.file=/etc/promtail/docker-config.yaml
  #   depends_on:
  #     - loki

  home:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: home
    restart: unless-stopped
    privileged: true # SPECIFIC TO HOME ASSISSTANT
    network_mode: host # SPECIFIC TO HOME ASSISSTANT
    volumes:
      - ./data/home:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.home.entrypoints=websecure
      - traefik.http.routers.home.rule=Host(`home.${DOMAIN_NAME}`)
      - traefik.http.routers.home.tls.certresolver=certo
      - traefik.http.routers.home.service=home
      - traefik.http.services.home.loadBalancer.server.port=8123

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN_NAME}
    volumes:
      - ./data/jellyfin:/config
      - ${MOVIES_DIR}:/data/movies
      - ${TV_SHOWS_DIR}:/data/tv
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN_NAME}`)
      - traefik.http.routers.jellyfin.tls.certresolver=certo
      - traefik.http.routers.jellyfin.service=jellyfin
      - traefik.http.services.jellyfin.loadBalancer.server.port=8096

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    restart: unless-stopped
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      - TRANSMISSION_WEB_HOME=/config/flood-for-transmission
    volumes:
      - ./data/transmission:/config
      - ${DOWNLOADS_DIR}:/downloads
    ports:
      - 51413:51413
      - 51413:51413/udp
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.middlewares=authentik@docker
      - traefik.http.routers.transmission.entrypoints=websecure
      - traefik.http.routers.transmission.rule=Host(`transmission.${DOMAIN_NAME}`)
      - traefik.http.routers.transmission.tls.certresolver=certo
      - traefik.http.routers.transmission.service=transmission
      - traefik.http.services.transmission.loadBalancer.server.port=9091

      ## == Auth bypass with API Key on local network ==
      - traefik.http.routers.transmission-api.entrypoints=websecure
      - traefik.http.routers.transmission-api.priority=99
      - traefik.http.routers.transmission-api.rule=Host(`transmission.${DOMAIN_NAME}`) && Headers(`X-Api-Key`, `${LOCAL_API_KEY}`)
      - traefik.http.routers.transmission-api.service=transmission
      - traefik.http.routers.transmission-api.tls.certresolver=certo

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      - DOZZLE_HOSTNAME=dozzle.${DOMAIN_NAME}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.dozzle.middlewares=authentik@docker
      - traefik.http.routers.dozzle.entrypoints=websecure
      - traefik.http.routers.dozzle.rule=Host(`dozzle.${DOMAIN_NAME}`)
      - traefik.http.routers.dozzle.tls.certresolver=certo
      - traefik.http.routers.dozzle.service=dozzle
      - traefik.http.services.dozzle.loadBalancer.server.port=8080

  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    command:
      - serve
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"
        ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - TZ=${TIMEZONE}
    user: ${UID}:${GID}
    volumes:
      - ./data/ntfy/cache:/var/cache/ntfy
      - ./data/ntfy:/etc/ntfy
    labels:
      - traefik.enable=true
      - traefik.http.routers.ntfy.middlewares=authentik@docker
      - traefik.http.routers.ntfy.entrypoints=websecure
      - traefik.http.routers.ntfy.rule=Host(`ntfy.${DOMAIN_NAME}`)
      - traefik.http.routers.ntfy.tls.certresolver=certo
      - traefik.http.routers.ntfy.service=ntfy
      - traefik.http.services.ntfy.loadBalancer.server.port=80

  changedetection:
    image: ghcr.io/dgtlmoon/changedetection.io
    container_name: changedetection
    restart: unless-stopped
    depends_on:
      playwright-chrome:
        condition: service_started
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - PLAYWRIGHT_DRIVER_URL=ws://playwright-chrome:3000
      - BASE_URL=https://changedetection.${DOMAIN_NAME}
      - HIDE_REFERER=true
      - FETCH_WORKERS=10
    volumes:
      - ./data/changedetection:/datastore
    labels:
      - traefik.enable=true
      # - traefik.http.routers.ntfy.middlewares=authentik@docker
      - traefik.http.routers.changedetection.entrypoints=websecure
      - traefik.http.routers.changedetection.rule=Host(`changedetection.${DOMAIN_NAME}`)
      - traefik.http.routers.changedetection.tls.certresolver=certo
      - traefik.http.routers.changedetection.service=changedetection
      - traefik.http.services.changedetection.loadBalancer.server.port=5000

  gokapi:
    image: docker.io/f0rc3/gokapi:latest
    container_name: gokapi
    restart: unless-stopped
    volumes:
      - ./data/gokapi:/app/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.gokapi.entrypoints=websecure
      - traefik.http.routers.gokapi.rule=Host(`gokapi.${DOMAIN_NAME}`)
      - traefik.http.routers.gokapi.tls.certresolver=certo
      - traefik.http.routers.gokapi.service=gokapi
      - traefik.http.services.gokapi.loadBalancer.server.port=53842

  playwright-chrome:
    image: dgtlmoon/sockpuppetbrowser:latest
    container_name: playwright-chrome
    cap_add:
      - SYS_ADMIN
    restart: unless-stopped
    environment:
      - SCREEN_WIDTH=1920
      - SCREEN_HEIGHT=1024
      - SCREEN_DEPTH=16
      - MAX_CONCURRENT_CHROME_PROCESSES=10

# TODO:
# - Media (Servarrrrrrr + Jellyfin + Transmission)
# - Hardlinks - https://trash-guides.info/Hardlinks/Hardlinks-and-Instant-Moves/
# - samba - https://github.com/ServerContainers/samba/blob/master/docker-compose.yml
# - uptime kuma
# - immich
# - nextcloud
# - paperless-ngx
# - Grocy
# - librespeed
# - rdesktop
# - mealie
# - calibre web
# - watch your lan
# - plant it